{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/api.ts"],"sourcesContent":["const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n\nexport interface ApiResponse<T = any> {\n  data?: T;\n  error?: string;\n}\n\nasync function fetchWithAuth<T>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> {\n  try {\n    const token = localStorage.getItem('token');\n    \n    const headers = new Headers(options.headers || {});\n    headers.set('Content-Type', 'application/json');\n    \n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      headers,\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      return { error: data.error || 'Something went wrong' };\n    }\n\n    return { data };\n  } catch (error: any) {\n    return { error: error.message };\n  }\n}\n\nexport const api = {\n  // Auth endpoints\n  login: async (email: string, password: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/users/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n  },\n\n  register: async (username: string, email: string, password: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/users/register', {\n      method: 'POST',\n      body: JSON.stringify({ username, email, password }),\n    });\n  },\n\n  logout: async (): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/users/logout', {\n      method: 'POST',\n    });\n  },\n\n  // User Profile endpoints\n  getProfile: async (): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/users/profile');\n  },\n\n  getUserProfile: async (userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/${userId}`);\n  },\n\n  updateProfile: async (userData: FormData): Promise<ApiResponse> => {\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/profile`, {\n        method: 'PUT',\n        headers,\n        body: userData,\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        return { error: data.error || 'Failed to update profile' };\n      }\n      return { data };\n    } catch (error: any) {\n      return { error: error.message };\n    }\n  },\n\n  // Search endpoints\n  searchMessages: async (params: {\n    term: string;\n    filters: any;\n    roomId?: string;\n    page: number;\n    pageSize: number;\n  }): Promise<ApiResponse> => {\n    const queryParams = new URLSearchParams({\n      term: params.term,\n      page: params.page.toString(),\n      pageSize: params.pageSize.toString(),\n      ...(params.roomId && { roomId: params.roomId }),\n      ...(params.filters && { filters: JSON.stringify(params.filters) })\n    });\n\n    return fetchWithAuth(`/api/messages/search?${queryParams.toString()}`);\n  },\n\n  getSearchSuggestions: async (query: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/suggestions?q=${encodeURIComponent(query)}`);\n  },\n\n  searchUsers: async (query: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/search?q=${encodeURIComponent(query)}`);\n  },\n\n  // Contact Management\n  addContact: async (userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/contacts/${userId}`, {\n      method: 'POST',\n    });\n  },\n\n  removeContact: async (userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/contacts/${userId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  blockUser: async (userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/block/${userId}`, {\n      method: 'POST',\n    });\n  },\n\n  unblockUser: async (userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/users/block/${userId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // Room endpoints\n  getRooms: async (): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/rooms');\n  },\n\n  createRoom: async (formData: FormData): Promise<ApiResponse> => {\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/rooms`, {\n        method: 'POST',\n        headers,\n        body: formData,\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        return { error: data.error || 'Failed to create room' };\n      }\n      return { data };\n    } catch (error: any) {\n      return { error: error.message };\n    }\n  },\n\n  joinRoom: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/join`, {\n      method: 'POST',\n    });\n  },\n\n  leaveRoom: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/leave`, {\n      method: 'POST',\n    });\n  },\n\n  updateRoom: async (roomId: string, formData: FormData): Promise<ApiResponse> => {\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/rooms/${roomId}`, {\n        method: 'PUT',\n        headers,\n        body: formData,\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        return { error: data.error || 'Failed to update room' };\n      }\n      return { data };\n    } catch (error: any) {\n      return { error: error.message };\n    }\n  },\n\n  deleteRoom: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  archiveRoom: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/archive`, {\n      method: 'POST',\n    });\n  },\n\n  unarchiveRoom: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/unarchive`, {\n      method: 'POST',\n    });\n  },\n\n  addRoomMember: async (roomId: string, userId: string, role: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/members`, {\n      method: 'POST',\n      body: JSON.stringify({ userId, role }),\n    });\n  },\n\n  removeRoomMember: async (roomId: string, userId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/members/${userId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  updateRoomMemberRole: async (roomId: string, userId: string, role: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/members/${userId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ role }),\n    });\n  },\n\n  markRoomAsRead: async (roomId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/${roomId}/read`, {\n      method: 'POST',\n    });\n  },\n\n  searchRooms: async (query: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/rooms/search?q=${encodeURIComponent(query)}`);\n  },\n\n  // Message endpoints\n  getMessages: async (): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/messages');\n  },\n\n  sendMessage: async (content: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/messages', {\n      method: 'POST',\n      body: JSON.stringify({ content }),\n    });\n  },\n\n  deleteMessage: async (messageId: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}`, {\n      method: 'DELETE',\n    });\n  },\n\n  editMessage: async (messageId: string, content: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ content }),\n    });\n  },\n\n  forwardMessage: async (messageId: string, content: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}/forward`, {\n      method: 'POST',\n      body: JSON.stringify({ content }),\n    });\n  },\n\n  reportMessage: async (messageId: string, reason: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}/report`, {\n      method: 'POST',\n      body: JSON.stringify({ reason }),\n    });\n  },\n\n  // Message reactions\n  addReaction: async (messageId: string, emoji: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}/reactions`, {\n      method: 'POST',\n      body: JSON.stringify({ emoji }),\n    });\n  },\n\n  removeReaction: async (messageId: string, emoji: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/messages/${messageId}/reactions/${encodeURIComponent(emoji)}`, {\n      method: 'DELETE',\n    });\n  },\n\n  // File uploads\n  uploadFile: async (file: File): Promise<ApiResponse> => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/messages/upload`, {\n        method: 'POST',\n        headers,\n        body: formData,\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        return { error: data.error || 'Failed to upload file' };\n      }\n      return { data };\n    } catch (error: any) {\n      return { error: error.message };\n    }\n  },\n\n  uploadVoiceMessage: async (audioBlob: Blob): Promise<ApiResponse> => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'voice-message.webm');\n\n    const token = localStorage.getItem('token');\n    const headers = new Headers();\n    if (token) {\n      headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/messages/voice`, {\n        method: 'POST',\n        headers,\n        body: formData,\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        return { error: data.error || 'Failed to upload voice message' };\n      }\n      return { data };\n    } catch (error: any) {\n      return { error: error.message };\n    }\n  },\n\n  verifyEmail: async (token: string): Promise<ApiResponse> => {\n    return fetchWithAuth(`/api/auth/verify-email/${token}`, {\n      method: 'POST'\n    });\n  },\n\n  resetPassword: async (email: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({ email })\n    });\n  },\n\n  changePassword: async (oldPassword: string, newPassword: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/auth/change-password', {\n      method: 'POST',\n      body: JSON.stringify({ oldPassword, newPassword })\n    });\n  },\n\n  deleteAccount: async (password: string): Promise<ApiResponse> => {\n    return fetchWithAuth('/api/auth/delete-account', {\n      method: 'POST',\n      body: JSON.stringify({ password })\n    });\n  },\n};\n\nexport default api;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\nimport api from '@/lib/api';\nimport { toast } from 'sonner';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  avatar?: string;\n  role: 'user' | 'admin' | 'moderator';\n  isVerified: boolean;\n  createdAt: Date;\n  lastLogin?: Date;\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  token: string | null;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n  remember?: boolean;\n}\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n}\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<void>;\n  updateUser: (data: Partial<User>) => Promise<void>;\n  verifyEmail: (token: string) => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  changePassword: (oldPassword: string, newPassword: string) => Promise<void>;\n  deleteAccount: (password: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'auth_user';\nconst TOKEN_REFRESH_INTERVAL = 14 * 60 * 1000; // 14 minutes\nconst SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const router = useRouter();\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    token: null\n  });\n\n  // Initialize auth state from storage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Only access localStorage on the client side\n        if (typeof window !== 'undefined') {\n          const storedToken = localStorage.getItem(TOKEN_KEY);\n          const storedUser = localStorage.getItem(USER_KEY);\n\n          if (storedToken && storedUser) {\n            const user = JSON.parse(storedUser);\n            setState({\n              user,\n              token: storedToken,\n              isAuthenticated: true,\n              isLoading: false\n            });\n\n            // Verify token validity\n            await refreshToken();\n            return;\n          }\n        }\n\n        setState(prev => ({ ...prev, isLoading: false }));\n      } catch (error) {\n        console.error('Failed to initialize auth:', error);\n        setState(prev => ({ ...prev, isLoading: false }));\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Login\n  const login = async (credentials: LoginCredentials) => {\n    try {\n      const response = await api.login(credentials.email, credentials.password);\n      if (response.error) throw new Error(response.error);\n\n      const { user, token } = response.data;\n\n      setState({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false\n      });\n\n      if (credentials.remember) {\n        localStorage.setItem(TOKEN_KEY, token);\n        localStorage.setItem(USER_KEY, JSON.stringify(user));\n      } else {\n        sessionStorage.setItem(TOKEN_KEY, token);\n        sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n      }\n\n      toast.success('Successfully logged in');\n      router.push('/chat');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to login');\n      throw error;\n    }\n  };\n\n  // Register\n  const register = async (data: RegisterData) => {\n    try {\n      const response = await api.register(data.username, data.email, data.password);\n      if (response.error) throw new Error(response.error);\n\n      toast.success('Registration successful! Please verify your email.');\n      router.push('/login');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to register');\n      throw error;\n    }\n  };\n\n  // Logout\n  const logout = async () => {\n    try {\n      if (state.token) {\n        await api.logout();\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setState({\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false\n      });\n\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.removeItem(USER_KEY);\n      sessionStorage.removeItem(TOKEN_KEY);\n      sessionStorage.removeItem(USER_KEY);\n\n      router.push('/login');\n    }\n  };\n\n  // Refresh token\n  const refreshToken = async () => {\n    if (!state.token) return;\n\n    try {\n      const response = await api.getProfile();\n      if (response.error) throw new Error(response.error);\n\n      setState(prev => ({\n        ...prev,\n        user: response.data\n      }));\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      await logout();\n    }\n  };\n\n  // Update user\n  const updateUser = async (data: Partial<User>) => {\n    try {\n      const formData = new FormData();\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined) {\n          formData.append(key, String(value));\n        }\n      });\n\n      const response = await api.updateProfile(formData);\n      if (response.error) throw new Error(response.error);\n\n      setState(prev => ({\n        ...prev,\n        user: { ...prev.user!, ...response.data }\n      }));\n\n      if (state.token) {\n        const userStr = JSON.stringify({ ...state.user, ...response.data });\n        localStorage.setItem(USER_KEY, userStr);\n        sessionStorage.setItem(USER_KEY, userStr);\n      }\n\n      toast.success('Profile updated successfully');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to update profile');\n      throw error;\n    }\n  };\n\n  // Verify email\n  const verifyEmail = async (token: string) => {\n    try {\n      const response = await api.verifyEmail(token);\n      if (response.error) throw new Error(response.error);\n\n      setState(prev => ({\n        ...prev,\n        user: { ...prev.user!, isVerified: true }\n      }));\n\n      toast.success('Email verified successfully');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to verify email');\n      throw error;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    try {\n      const response = await api.resetPassword(email);\n      if (response.error) throw new Error(response.error);\n\n      toast.success('Password reset instructions sent to your email');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to reset password');\n      throw error;\n    }\n  };\n\n  // Change password\n  const changePassword = async (oldPassword: string, newPassword: string) => {\n    try {\n      const response = await api.changePassword(oldPassword, newPassword);\n      if (response.error) throw new Error(response.error);\n\n      toast.success('Password changed successfully');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to change password');\n      throw error;\n    }\n  };\n\n  // Delete account\n  const deleteAccount = async (password: string) => {\n    try {\n      const response = await api.deleteAccount(password);\n      if (response.error) throw new Error(response.error);\n\n      await logout();\n      toast.success('Account deleted successfully');\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to delete account');\n      throw error;\n    }\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    refreshToken,\n    updateUser,\n    verifyEmail,\n    resetPassword,\n    changePassword,\n    deleteAccount\n  };\n\n  // Client-side effects\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    // Set up token refresh interval\n    let refreshInterval: NodeJS.Timeout | null = null;\n    if (state.isAuthenticated) {\n      refreshInterval = setInterval(refreshToken, TOKEN_REFRESH_INTERVAL);\n    }\n\n    // Set up session timeout\n    let timeoutId: NodeJS.Timeout | null = null;\n    let handleActivity: (() => void) | null = null;\n\n    if (state.isAuthenticated) {\n      const resetTimeout = () => {\n        if (timeoutId) clearTimeout(timeoutId);\n        timeoutId = setTimeout(logout, SESSION_TIMEOUT);\n      };\n\n      // Reset timeout on user activity\n      handleActivity = () => resetTimeout();\n      window.addEventListener('mousemove', handleActivity);\n      window.addEventListener('keydown', handleActivity);\n      resetTimeout();\n    }\n\n    // Route protection\n    const path = window.location.pathname;\n    if (!state.isLoading && !state.isAuthenticated) {\n      if (path !== '/login' && path !== '/register') {\n        router.push('/login');\n      }\n    }\n\n    return () => {\n      if (refreshInterval) clearInterval(refreshInterval);\n      if (timeoutId) clearTimeout(timeoutId);\n      if (handleActivity && state.isAuthenticated) {\n        window.removeEventListener('mousemove', handleActivity);\n        window.removeEventListener('keydown', handleActivity);\n      }\n    };\n  }, [state.isAuthenticated, state.isLoading, router, logout, refreshToken]);\n\n  return (\n    <AuthContext.Provider value={value}>\n      {state.isLoading ? (\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\" />\n        </div>\n      ) : (\n        children\n      )}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Utility function to check if token is expired\nexport function isTokenExpired(token: string): boolean {\n  try {\n    const [, payload] = token.split('.');\n    const decodedPayload = JSON.parse(atob(payload));\n    return decodedPayload.exp * 1000 < Date.now();\n  } catch {\n    return true;\n  }\n}\n\n// Utility function to get token expiration time\nexport function getTokenExpirationTime(token: string): Date | null {\n  try {\n    const [, payload] = token.split('.');\n    const decodedPayload = JSON.parse(atob(payload));\n    return new Date(decodedPayload.exp * 1000);\n  } catch {\n    return null;\n  }\n}\n\nexport type { User, LoginCredentials, RegisterData, AuthState, AuthContextType };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/sonner.tsx"],"sourcesContent":["\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;;IACzC,MAAM,EAAE,QAAQ,QAAQ,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD;IAEpC,qBACE,6LAAC,2IAAA,CAAA,UAAM;QACL,OAAO;QACP,WAAU;QACV,OACE;YACE,eAAe;YACf,iBAAiB;YACjB,mBAAmB;QACrB;QAED,GAAG,KAAK;;;;;;AAGf;GAjBM;;QACyB,mJAAA,CAAA,WAAQ;;;KADjC","debugId":null}}]
}